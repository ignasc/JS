Design a cash register drawer function checkCashRegister() that accepts purchase price as the first argument (price), payment as the second argument (cash), and cash-in-drawer (cid) as the third argument.

cid is a 2D array listing available currency.

The checkCashRegister() function should always return an object with a status key and a change key.

Return {status: "INSUFFICIENT_FUNDS", change: []} if cash-in-drawer is less than the change due, or if you cannot return the exact change.

Return {status: "CLOSED", change: [...]} with cash-in-drawer as the value for the key change if it is equal to the change due.

Otherwise, return {status: "OPEN", change: [...]}, with the change due in coins and bills, sorted in highest to lowest order, as the value of the change key.
Currency Unit	Amount
Penny	$0.01 (PENNY)
Nickel	$0.05 (NICKEL)
Dime	$0.1 (DIME)
Quarter	$0.25 (QUARTER)
Dollar	$1 (ONE)
Five Dollars	$5 (FIVE)
Ten Dollars	$10 (TEN)
Twenty Dollars	$20 (TWENTY)
One-hundred Dollars	$100 (ONE HUNDRED)

See below for an example of a cash-in-drawer array:

[
  ["PENNY", 1.01],
  ["NICKEL", 2.05],
  ["DIME", 3.1],
  ["QUARTER", 4.25],
  ["ONE", 90],
  ["FIVE", 55],
  ["TEN", 20],
  ["TWENTY", 60],
  ["ONE HUNDRED", 100]
]

-------------------------------------------
checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]) should return an object.

checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]) should return {status: "OPEN", change: [["QUARTER", 0.5]]}.

checkCashRegister(3.26, 100, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]) should return {status: "OPEN", change: [["TWENTY", 60], ["TEN", 20], ["FIVE", 15], ["ONE", 1], ["QUARTER", 0.5], ["DIME", 0.2], ["PENNY", 0.04]]}.
Passed

checkCashRegister(19.5, 20, [["PENNY", 0.01], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 0], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]) should return {status: "INSUFFICIENT_FUNDS", change: []}.
Passed

checkCashRegister(19.5, 20, [["PENNY", 0.01], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 1], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]) should return {status: "INSUFFICIENT_FUNDS", change: []}.

checkCashRegister(19.5, 20, [["PENNY", 0.5], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 0], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]) should return {status: "CLOSED", change: [["PENNY", 0.5], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 0], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]}

------------------------------------------
function checkCashRegister(price, cash, cid) {
  
  
  //------------------------------------------------
  //all arguments are scaled by 100 to get rid of decimal points
  price *= 100;
  cash *= 100;
  for(let i = 0; i < cid.length; i++){
    cid[i][1] = cid[i][1]*100;
  }
  //------------------------------------------------
  let change;
  let changeToReturn;
  let casherTotal = 0;
  let totalCashTaken;
  let currency = [//Currency also multiplied by 100
    ["PENNY", 1],
    ["NICKEL", 5],
    ["DIME", 10],
    ["QUARTER", 25],
    ["ONE", 100],
    ["FIVE", 500],
    ["TEN", 1000],
    ["TWENTY", 2000],
    ["ONE HUNDRED", 10000]
  ];

  //Sum up all available money in cash-in-drawer
  for (let i = 0; i < cid.length; i++){
    casherTotal += cid[i][1];
  }
  
  //Check if that sum is equal to change needed to give back
  if (casherTotal == cash-price){
    
    for(let i = 0; i < cid.length; i++){//Revert cash-in-drawer money back to decimal point
      cid[i][1] = cid[i][1]/100;
    }

    changeToReturn = {status:"CLOSED", change: cid};//Return CLOSED status
    return changeToReturn;

  }

  //If above is not true, then proceed to attempt to reduce change to 0
  change = cash - price;
  changeToReturn = {status: "OPEN", change:[]};
  totalCashTaken = 0;

  for(let i = cid.length-1; i >= 0; i--){//Use each currency value for reduction
      
      if(cid[i][1] == 0 || change - currency[i][1] < 0){//Check if we have any money of that currency in the drawer OR if that currency is too big for change
        continue;
      } else {//Reduce the change using current currency as much as possible while change is above 0 AND there is enough money in cash-in-drawer AND we do not reduce change below 0
        while(change > 0 && cid[i][1] > 0 && change - currency[i][1] >= 0){
          change -= currency[i][1];//Reduce change
          cid[i][1] -= currency[i][1];//Reduce money in cash-in-drawer
          totalCashTaken += currency[i][1];//Track, how much money was taken from the drawer
        }
        changeToReturn.change.push([cid[i][0], totalCashTaken/100]);//Store, how much money was used for each currency
        totalCashTaken = 0;//Reset total money taken to 0
      }
      if(change == 0){//Stop above while when change is 0
        break;
      }
      //Otherwise it will continue to depleet the cash-in-drawer
  }
  
  //Check if we failed to reduce change to 0
  if (change != 0){
    changeToReturn = {status: "INSUFFICIENT_FUNDS", change: []}//Return INSUFFICIENT FUNDS status
  }
  
  //If not, then return the OPEN status
  return changeToReturn;
}

checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]);